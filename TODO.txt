class GetOrders(Method):
    method = 'GET'
    plural = True

get_orders = GetOrders()

route = Route('/orders/', OrderResource(), actions=[get_orders, CreateOrder()])




class Resource:
    ...


class ResourceList(Resource):
    resource_type = None


class Order(Resource):
    code = charfield


class OrderList(ResourceList):
    resource_type = Order

get = Method("GET")

class PostMethod(Method):
    name = "POST"

post = PostMethod()

Route("/orders/", OrderList(), methods=[get])
Route("/orders/", Order(), methods=[post])
Route("/orders/{order.code}/prices/{key}", Price(), methods=[get, put, patch, delete])


process = Method("POST", )

Route("/createOrder", Order(), methods=[process])



class PacturOrderResource:
    fields = [
        string_field(name="code"),
    ]

class OrderResource(WebFrameworkResource):
    __implements__ = PactumOrderResource

    code = integer_field()


validate_implementation(OrderResource)
    for field in OrderResource.fields:
        if field.type != OrderResource.__implements__[field.name].type:
            raise


class PriceResource(Resource):
    fields = [
        DecimalField(name="price"),
        DecimalField(name="offer"),
        PositiveIntegerField(name="key"),
    ]

    def get_route(self):
        return route


price_list = ResourceList(resource=PriceResource())

class Product(Resource):
    fields = [
        ResourceField(name="prices", resource=price_list)
    ]

product = {
    ...
    prices: [
        {price: 20.00, offer: 19.99},
        {price: 10.00, offer: 9.99},
    ]
}

product = {
    ...
    prices: [
        "https://...@@@www/prices/12345",
        "https://...@@@www/prices/123456",
    ]
}


class MyDictVisitor:
    def __init__(self):
        self.api = {}
        self.last_version = None
        self.last_route = None
        self.last_action = None

    def visitAPI(self, element):
        self.api = {
            "name": element.name,
            "versions": [],
        }

    def visitVersion(self, element):
        self.last_version = self.api["versions"]

        self.last_version.append({
            name=element.name,
            "routes": [],
        })

    def visitRoute(self, element):
        self.last_route = self.last_version["routes"]

        self.last_route.append({
            "path": element.path,
            "actions": [],
        })


    def visitActions(self, element):
        self.last_action = self.last_route["actions"]

        self.last_action.append({
            "request": (element.request.verb, element.request.payload),
            "responses": [],
        })



def json_export(api):
   visitor = MyDictVisitor()
   api.accept(visitor)
   d = visitor.get_result()
   return json.dumps(d)
